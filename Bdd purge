Si votre base de données est très volumineuse et que vous souhaitez nettoyer les anciennes données pour réduire sa taille, vous pouvez utiliser un script shell pour supprimer les données obsolètes. Voici un exemple de script qui supprime les enregistrements d'une table spécifique basés sur une condition, comme une date antérieure à une certaine période.

Supposons que vous avez une table appelée `logs` avec une colonne `created_at` qui contient les dates de création des enregistrements, et que vous voulez supprimer tous les enregistrements plus anciens que 30 jours.

### Script Shell pour Nettoyer une Base de Données MySQL

```sh
#!/bin/bash

# Variables
USER="your_mysql_username"
PASSWORD="your_mysql_password"
HOST="localhost"
DB_NAME="your_database_name"
TABLE_NAME="logs"
DAYS_TO_KEEP=30

# Calcul de la date limite pour la suppression
DATE_LIMIT=$(date -d "-$DAYS_TO_KEEP days" +"%Y-%m-%d")

# Commande SQL pour supprimer les enregistrements
SQL_QUERY="DELETE FROM $TABLE_NAME WHERE created_at < '$DATE_LIMIT';"

# Exécution de la commande SQL
mysql -u $USER -p$PASSWORD -h $HOST -D $DB_NAME -e "$SQL_QUERY"

# Vérification de la réussite de la commande SQL
if [ $? -eq 0 ]; then
  echo "Nettoyage réussi : les enregistrements plus anciens que $DATE_LIMIT ont été supprimés."
else
  echo "Erreur lors du nettoyage de la base de données" >&2
  exit 1
fi
```

### Explications

- **Variables**
  - `USER` : votre nom d'utilisateur MySQL.
  - `PASSWORD` : votre mot de passe MySQL.
  - `HOST` : l'hôte MySQL (généralement `localhost`).
  - `DB_NAME` : le nom de la base de données à nettoyer.
  - `TABLE_NAME` : le nom de la table à nettoyer.
  - `DAYS_TO_KEEP` : le nombre de jours de données à conserver.

- **DATE_LIMIT** : calcule la date limite pour la suppression des enregistrements. Tous les enregistrements antérieurs à cette date seront supprimés.

- **SQL_QUERY** : commande SQL qui supprime les enregistrements plus anciens que la date limite.

- **mysql -e "$SQL_QUERY"** : exécute la commande SQL sur la base de données spécifiée.

- **Vérification de la réussite de la commande SQL** : après l'exécution de la commande SQL, le script vérifie le code de retour (`$?`). Si la suppression a réussi (`0`), il affiche un message de succès. Sinon, il affiche un message d'erreur et termine le script avec un code de sortie `1`.

### Utilisation

1. Copiez le script ci-dessus dans un fichier, par exemple `cleanup_mysql.sh`.
2. Modifiez les variables pour qu'elles correspondent à vos informations de connexion MySQL, au nom de votre table et au nombre de jours de données à conserver.
3. Rendez le script exécutable avec la commande :
   ```sh
   chmod +x cleanup_mysql.sh
   ```
4. Exécutez le script :
   ```sh
   ./cleanup_mysql.sh
   ```

Vous pouvez également programmer ce script avec `cron` pour qu'il s'exécute régulièrement et garde votre base de données propre. Voici comment ajouter une tâche cron pour exécuter ce script chaque jour à minuit :

```sh
crontab -e
```

Ajoutez la ligne suivante à la fin du fichier crontab :

```sh
0 0 * * * /chemin/vers/cleanup_mysql.sh
```

Cela exécutera le script de nettoyage chaque jour à minuit.
